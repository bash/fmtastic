name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-version:
    name: Rust Version
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.rust-version.outputs.rust-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine Rust Version
        id: rust-version
        run: echo "rust-version=$(./rust-version.sh)" >> "$GITHUB_OUTPUT"
  build:
    needs: rust-version
    name: ${{ matrix.min-rust-version && format('Build (Rust {0})', needs.rust-version.outputs.rust-version) || 'Build' }}
    strategy:
      matrix:
        min-rust-version: [true, false]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Minimum Rust Version
      if: matrix.min-rust-version
      run: rustup override set "${{ needs.rust-version.outputs.rust-version }}"
    - name: Build
      run: cargo build --workspace
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run tests
      run: cargo test --workspace
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check Format
      run: cargo fmt --check --all
    - name: Clippy
      run: cargo clippy --workspace -- -Dwarnings
    - name: Rustdoc
      run: cargo doc --no-deps --workspace --all-features
      env:
        RUSTDOCFLAGS: '-Dwarnings'
